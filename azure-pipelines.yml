trigger:
- master

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

steps:

- task: SonarQubePrepare@4
  inputs:
    SonarQube: 'SandBox-Sonarqube'
    scannerMode: 'MSBuild'
    projectKey: 'Rei-Do-Almoco'
    projectName: 'Rei do Almoco'
    extraProperties: 'sonar.cs.vscoveragexml.reportsPaths=**/*.coveragexml'

- task: NuGetToolInstaller@1

- task: NuGetCommand@2
  inputs:
    restoreSolution: '$(solution)'

- task: DotNetCoreCLI@2
  displayName: dotnet restore
  inputs:
    command: restore
    projects: '**/*.csproj'

- task: DotNetCoreCLI@2
  displayName: dotnet build
  inputs:
    command: build
    projects: '$(solution)'
    arguments: '--configuration $(buildConfiguration)'
  
- task: DotNetCoreCLI@2
  inputs:
    command: 'test'
    projects: '**/*Test*.csproj'
    arguments: '--configuration $(BuildConfiguration) --collect "Code coverage"'
    testRunTitle: 'dotnet test'
    
- task: SonarQubeAnalyze@4
  displayName: Sonar qube Analysis

- task: SonarQubePublish@4
  displayName: Sonar qube publish results
  inputs:
    pollingTimeoutSec: '300'

#- task: VSTest@2
  #displayName: 'Run All Automated Unit Tests'
  #inputs:
    #runSettingsFile: 'Config.runsettings'
  #  codeCoverageEnabled: true
  #  testRunTitle: 'ProjectName - Automated Unit Tests'
  #  platform: '$(BuildPlatform)'
  #  configuration: '$(BuildConfiguration)'
  #  diagnosticsEnabled: True
  #continueOnError: false 

- task: PowerShell@2
  displayName: Covert coverage file
  inputs:
    targetType: 'inline'
    script: |
      Get-ChildItem -Recurse -Filter "*.coverage" | % {
      $outfile = "$([System.IO.Path]::GetFileNameWithoutExtension($_.FullName)).coveragexml"
      $output = [System.IO.Path]::Combine([System.IO.Path]::GetDirectoryName($_.FullName), $outfile)
      "Analyse '$($_.Name)' with output '$outfile'..."
      . "C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\Team Tools\Dynamic Code Coverage Tools\CodeCoverage.exe" analyze /output:$output $_.FullName
      }
      "Done"
      
#- task: VSBuild@1
#  inputs:
#    solution: '$(solution)'
#    msbuildArgs: '/p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:DesktopBuildPackageLocation="$(build.artifactStagingDirectory)\WebApp.zip" /p:DeployIisAppPath="Default Web Site"'
#    platform: '$(buildPlatform)'
#    configuration: '$(buildConfiguration)'

#- task: VSTest@2
#  inputs:
#    platform: '$(buildPlatform)'
#    configuration: '$(buildConfiguration)'
